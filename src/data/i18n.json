{
  "en-US": {
    "steps": {
      "formatValidationLabel": "Format validation",
      "formatValidationLabelPending": "Validating format",
      "signatureVerificationLabel": "Proof Verification",
      "signatureVerificationLabelPending": "Verifying Proof",
      "identityVerificationLabel": "Identity verification",
      "identityVerificationLabelPending": "Verifying identity",
      "statusCheckLabel": "Status check",
      "statusCheckLabelPending": "Checking record status"
    },
    "subSteps": {
      "getTransactionIdLabel": "Get transaction ID",
      "getTransactionIdLabelPending": "Getting transaction ID",
      "computeLocalHashLabel": "Compute local hash",
      "computeLocalHashLabelPending": "Computing local hash",
      "fetchRemoteHashLabel": "Fetch remote hash",
      "fetchRemoteHashLabelPending": "Fetching remote hash",
      "getIssuerProfileLabel": "Get issuer profile",
      "getIssuerProfileLabelPending": "Getting issuer profile",
      "parseIssuerKeysLabel": "Parse issuer keys",
      "parseIssuerKeysLabelPending": "Parsing issuer keys",
      "compareHashesLabel": "Compare hashes",
      "compareHashesLabelPending": "Comparing hashes",
      "checkDocumentSignatureLabel":"Check document signature",
      "checkDocumentSignatureLabelPending":"Checking document signature",
      "checkMerkleRootLabel": "Check Merkle Root",
      "checkMerkleRootLabelPending": "Checking Merkle Root",
      "checkReceiptLabel": "Check Receipt",
      "checkReceiptLabelPending": "Checking Receipt",
      "checkAuthenticityLabel": "Check Authenticity",
      "checkAuthenticityLabelPending": "Checking Authenticity",
      "checkRevokedStatusLabel": "Check Revoked Status",
      "checkRevokedStatusLabelPending": "Checking Revoked Status",
      "checkExpiresDateLabel": "Check Expiration Date",
      "checkExpiresDateLabelPending": "Checking Expiration Date",
      "controlVerificationMethodLabel":"Control Verification Method",
      "controlVerificationMethodLabelPending":"Controlling Verification Method",
      "retrieveVerificationMethodPublicKeyLabel": "Extract Public Key from DID Document",
      "retrieveVerificationMethodPublicKeyLabelPending": "Extracting Public Key from DID Document",
      "deriveIssuingAddressFromPublicKeyLabel": "Derive Issuing Address from Public Key",
      "deriveIssuingAddressFromPublicKeyLabelPending": "Deriving Issuing Address from Public Key",
      "compareIssuingAddressLabel": "Compare addresses",
      "compareIssuingAddressLabelPending": "Comparing addresses",
      "checkImagesIntegrityLabel":  "Verify Images Integrity",
      "checkImagesIntegrityLabelPending":  "Verifying Images Integrity"
    },
    "revocation": {
      "preReason": "Reason given:",
      "reason": "This certificate has been revoked by the issuer."
    },
    "success": {
      "mocknet": {
        "label": "This Mocknet credential passed all checks",
        "description": "Mocknet credentials are used for test purposes only. They are not recorded on a blockchain, and they should not be considered verified Blockcerts."
      },
      "blockchain": {
        "label": "Verified",
        "description": "This is a valid ${chain} certificate.",
        "linkText": "View transaction link"
      },
      "generic": {
        "label": "Verified",
        "description": "The ${SIGNATURE_TYPE} signature of this document has been successfully verified."
      },
      "multisign": {
        "label": "Verified",
        "description": "All the signatures of this certificate have successfully verified."
      }
    },
    "errors": {
      "certificateNotValid": "This is not a valid certificate",
      "couldNotConfirmTx": "Could not confirm the transaction",
      "ensureHashesEqual": "Computed hash does not match remote hash",
      "ensureMerkleRootEqual": "Merkle root does not match remote hash.",
      "ensureNotExpired": "This certificate has expired.",
      "ensureValidReceipt": "The receipt is malformed. There was a problem navigating the merkle tree in the receipt.",
      "failedJsonLdNormalization": "Failed JSON-LD normalization",
      "foundUnmappedFields": "Found unmapped fields during JSON-LD normalization",
      "identityErrorBaseMessage":"Issuer identity mismatch",
      "deriveIssuingAddressFromPublicKey": "Unsupported blockchain for DID verification",
      "controlVerificationMethod":"The identity document provided by the issuer does not match the verification method",
      "retrieveVerificationMethodPublicKey":"The identity document provided by the issuer does not reference the verification method",
      "compareIssuingAddress": "The provided verification method does not match the issuer identity",
      "invalidIssuingAddressCreationTime": "The specified issuing address was created after the transaction occurred.",
      "invalidIssuingAddressRevoked": "The specified issuing address was revoked by the issuer before the transaction occurred.",
      "invalidIssuingAddressExpired": "The specified issuing address expired before the transaction occurred.",
      "invalidIssuingAddressUnknown": "The address used to issue this Blockcerts does not belong to the claimed issuer.",
      "getChain": "Didn't recognize chain value",
      "getIssuerProfile": "Unable to get issuer profile",
      "getRevokedAssertions": "Unable to get revocation assertions",
      "getTransactionId": "Cannot verify this certificate without a transaction ID to compare against.",
      "invalidMerkleReceipt": "Invalid Merkle Receipt. Proof hash did not match Merkle root",
      "invalidMerkleVersion": "Merkle version used for signature is incompatible with Blockcerts version.",
      "isTransactionIdValid": "Cannot verify this certificate without a transaction ID to compare against.",
      "issuerProfileNotSet": "no issuer address given",
      "issuerProfileInvalid": "retrieved file does not seem to be a valid profile",
      "parseIssuerKeys": "Unable to parse JSON out of issuer identification data.",
      "checkImagesIntegrity":"Image integrity verification proved that the content was modified after issuance."
    }
  },
  "fr": {
    "steps": {
      "formatValidationLabel": "Validation du format",
      "formatValidationLabelPending": "Validation du format",
      "signatureVerificationLabel": "Vérification de la preuve",
      "signatureVerificationLabelPending": "Vérification de la preuve",
      "identityVerificationLabel": "Vérification de l'identité",
      "identityVerificationLabelPending":  "Vérification de l'identité",
      "statusCheckLabel": "Vérification du status",
      "statusCheckLabelPending": "Vérification du status"
    },
    "subSteps": {
      "getTransactionIdLabel": "Obtention de l'identifiant de transaction",
      "getTransactionIdLabelPending": "Obtention de l'identifiant de transaction",
      "computeLocalHashLabel": "Calcul du hash local",
      "computeLocalHashLabelPending": "Calcul du hash local",
      "fetchRemoteHashLabel": "Récupération du hash distant",
      "fetchRemoteHashLabelPending": "Récupération du hash distant",
      "getIssuerProfileLabel": "Obtention du profil de l'émetteur",
      "getIssuerProfileLabelPending": "Obtention du profil de l'émetteur",
      "parseIssuerKeysLabel": "Traitement des clés de l'émetteur",
      "parseIssuerKeysLabelPending": "Traitement des clés de l'émetteur",
      "compareHashesLabel": "Comparaison des hash",
      "compareHashesLabelPending": "Comparaison des hashs",
      "checkDocumentSignatureLabel": "Vérification de la signature du document",
      "checkDocumentSignatureLabelPending": "Vérification de la signature du document",
      "checkMerkleRootLabel": "Vérification du Merkle Root",
      "checkMerkleRootLabelPending": "Vérification du  Merkle Root",
      "checkReceiptLabel": "Vérification du reçu",
      "checkReceiptLabelPending": "Vérification du reçu",
      "checkAuthenticityLabel": "Vérification de l'authenticité",
      "checkAuthenticityLabelPending": "Vérification de l'authenticité",
      "checkRevokedStatusLabel": "Vérification du status de révocation",
      "checkRevokedStatusLabelPending": "Vérification du status de révocation",
      "checkExpiresDateLabel": "Vérification de la date d'expiration",
      "checkExpiresDateLabelPending": "Vérification de la date d'expiration",
      "controlVerificationMethodLabel": "Contrôle de la Méthode de Vérification",
      "controlVerificationMethodLabelPending": "Contrôle de la Méthode de Vérification",
      "retrieveVerificationMethodPublicKeyLabel": "Extraction de la clé publique depuis le document DID",
      "retrieveVerificationMethodPublicKeyLabelPending": "Extraction de la clé publique depuis le document DID",
      "deriveIssuingAddressFromPublicKeyLabel": "Dérivation de l'adresse d'émission depuis la clé publique",
      "deriveIssuingAddressFromPublicKeyLabelPending": "Dérivation de l'adresse d'émission depuis la clé publique",
      "compareIssuingAddressLabel":  "Comparaison des adresses",
      "compareIssuingAddressLabelPending":  "Comparaison des adresses",
      "checkImagesIntegrityLabel":  "Vérification de l'Intégrité des Images",
      "checkImagesIntegrityLabelPending":  "Vérification de l'Intégrité des Images"
    },
    "revocation": {
      "preReason": "Raison :",
      "reason": "Ce certificat a été révoqué par l'émetteur."
    },
    "success": {
      "mocknet": {
        "label": "Cet enregistrement Mocknet a été vérifié",
        "description": "Le mode Mocknet est utilisé à des fins de tests uniquement. Ce Blockcert n'a pas été enregistré sur une blockchain, et en tant que tel ne peut pas être considéré un Blockcert valide."
      },
      "blockchain": {
        "label": "Vérifié",
        "description": "Ceci est un certificat ${chain} valide.",
        "linkText": "Voir la transaction"
      },
      "generic": {
        "label": "Verified",
        "description": "La signature ${SIGNATURE_TYPE} de ce certificat a été vérifiée avec succès."
      },
      "multisign": {
        "label": "Vérifié",
        "description": "Toutes les signatures numériques de ce certificat ont été vérifiées avec succès."
      }
    },
    "errors": {
      "certificateNotValid": "Certificat invalide",
      "couldNotConfirmTx": "Impossible de confirmer la transaction",
      "ensureHashesEqual": "Calcul du hash local différent du hash distant",
      "ensureMerkleRootEqual": "Le Merkle root ne correspond pas au hash distant",
      "ensureNotExpired": "Certificat expiré",
      "ensureValidReceipt": "Erreur d'écriture du reçu. Un problème est survenu lors de la navigation de l'arbre Merkle du reçu.",
      "failedJsonLdNormalization": "Erreur de normalisation JSON-LD",
      "foundUnmappedFields": "Champs non liés découverts durant la normalisation JSON-LD",
      "identityErrorBaseMessage": "Identité de l'émetteur invalide",
      "deriveIssuingAddressFromPublicKey":  "Cette blockchain n'est pas supportée pour la vérification de l'identité décentralisée.",
      "controlVerificationMethod": "Le document d'identité de l'émetteur ne correspond pas à la méthode de vérification.",
      "retrieveVerificationMethodPublicKey": "Le document d'identité de l'émetteur ne fait pas mention de la méthode de vérification.",
      "compareIssuingAddress": "La méthode de vérification n'a pas permis d'établir l'identité de l'émetteur.",
      "invalidIssuingAddressCreationTime": "L'adresse d'émission utilisée a été créée après la transaction d'enregistrement.",
      "invalidIssuingAddressRevoked": "L'adresse d'émission utilisée a été décommissionnée par l'émetteur avant la transaction d'enregistrement.",
      "invalidIssuingAddressExpired": "L'adresse d'émission utilisée a expiré avant la transaction.",
      "invalidIssuingAddressUnknown": "L'adresse utilisée pour émettre ce Blockcerts n'appartient à l'émetteur déclaré.",
      "getChain": "Valeur de chaine non reconnue",
      "getIssuerProfile": "Profil de l'émetteur indisponible",
      "getRevokedAssertions": "Impossible d'obtenir les raisons de revocation",
      "getTransactionId": "Impossible de vérifier ce certificat sans un identifiant de transaction valide",
      "invalidMerkleReceipt": "Reçu Merkle invalide. Hash de preuve différent du Merkle root",
      "invalidMerkleVersion": "La version du Merkle utilisé est incompatible avec la version Blockcerts.",
      "isTransactionIdValid": "Impossible de vérifier ce certificat sans un identifiant de transaction valide",
      "issuerProfileNotSet": "l'URL de l'émetteur n'est pas définie",
      "issuerProfileInvalid": "le document distant ne semble pas être un profil d'émetteur valide",
      "parseIssuerKeys": "Impossible de lire le JSON d'identification de l'émetteur",
      "checkImagesIntegrity": "La vérification des images a prouvé que le contenu a été modifié après l'émission."
    }
  },
  "es": {
    "steps": {
      "formatValidationLabel": "Validación de formato",
      "formatValidationLabelPending": "Validando el formato",
      "signatureVerificationLabel": "Verificar prueba",
      "signatureVerificationLabelPending": "Verificando prueba",
      "identityVerificationLabel": "Verificar identitad",
      "identityVerificationLabelPending":  "Verificando identitad",
      "statusCheckLabel": "Estado de Verificación",
      "statusCheckLabelPending": "Verificando Estado de Grabación"
    },
    "subSteps": {
      "getTransactionIdLabel": "Obtener Identificación de Transacción",
      "getTransactionIdLabelPending": "Obteniendo Identificación de Transacción",
      "computeLocalHashLabel": "Calcular cadena binaria local",
      "computeLocalHashLabelPending": "Calculando cadena binaria local",
      "fetchRemoteHashLabel": "Obtener cadena binaria remota",
      "fetchRemoteHashLabelPending": "Obeniendo cadena binaria remota",
      "getIssuerProfileLabel": "Obtener perfil de emisor",
      "getIssuerProfileLabelPending": "Obteniendo perfil de emisor",
      "parseIssuerKeysLabel": "Analizar claves del emisor",
      "parseIssuerKeysLabelPending": "Analizando claves del emisor",
      "compareHashesLabel": "Comparar cadenas binarias",
      "compareHashesLabelPending": "Comparando cadenas binarias",
      "checkDocumentSignatureLabel": "Controlar firma del documento",
      "checkDocumentSignatureLabelPending": "Controlando firma del documento",
      "checkMerkleRootLabel": "Verificar Merkle Root",
      "checkMerkleRootLabelPending": "Verificando Merkle Root",
      "checkReceiptLabel": "Verificar Recibo",
      "checkReceiptLabelPending": "Verificando Recibo",
      "checkAuthenticityLabel": "Verificar Autenticidad",
      "checkAuthenticityLabelPending": "Verificando Autenticidad",
      "checkRevokedStatusLabel": "Verificar Estado de Revocación",
      "checkRevokedStatusLabelPending": "Verificando Estado de Revocación",
      "checkExpiresDateLabel": "Verificar Fechas de Expiración",
      "checkExpiresDateLabelPending": "Verificando Fechas de Expiración",
      "controlVerificationMethodLabel": "Controlar Metodo de Verificación",
      "controlVerificationMethodLabelPending": "Controlando Metodo de Verificación",
      "retrieveVerificationMethodPublicKeyLabel": "Extraer la llave pública desde el documento DID",
      "retrieveVerificationMethodPublicKeyLabelPending": "Extraendo la llave pública desde el documento DID",
      "deriveIssuingAddressFromPublicKeyLabel": "Derivar la dirección del emisor desde la llave pública",
      "deriveIssuingAddressFromPublicKeyLabelPending": "Derivando la dirección del emisor desde la llave pública",
      "compareIssuingAddressLabel":  "Comparar direcciones",
      "compareIssuingAddressLabelPending":  "Comparando direcciones",
      "checkImagesIntegrityLabel":  "Comprobar Integridad de las Imagens",
      "checkImagesIntegrityLabelPending":  "Comprobando Integridad de las Imagens"
    },
    "revocation": {
      "preReason": "Razón dada:",
      "reason": "Este certificado ha sido revocado por el emisor"
    },
    "success": {
      "mocknet": {
        "label": "Esta credencial de Mocknet pasó todas las comprobaciones",
        "description": "Las credenciales de Mocknet se usan solo con fines de prueba. No se graban en una cadena de bloques, y no se deben considerar Blockcerts Verificados."
      },
      "blockchain": {
        "label": "Verificado",
        "description": "Este es un certificado válido de ${chain}.",
        "linkText": "Ver enlace de transacción"
      },
      "generic": {
        "label": "Verified",
        "description": "La firma ${SIGNATURE_TYPE} de este certificado ha verificado con éxito."
      },
      "multisign": {
        "label": "Verificado",
        "description": "Todas las firmas digitales de este certificado han verificado con éxito."
      }
    },
    "errors": {
      "certificateNotValid": "Este no es un certificado válido",
      "couldNotConfirmTx": "No se ha podido confirmar la transacción",
      "ensureHashesEqual": "La cadena binaria calculada no corresponde con la cadena binaria remota",
      "ensureMerkleRootEqual": "La raíz Merkle no corresponde con la cadena binaria remota",
      "ensureNotExpired": "Este certificado ha expirado",
      "ensureValidReceipt": "El recibo está malformado. Hubo un problema navegando el árbol Merkle en el recibo",
      "failedJsonLdNormalization": "La normalización del JSON-LD ha fallado",
      "foundUnmappedFields": "Se han encontrado campos no mapeados durante la normalización de JSON-LD",
      "identityErrorBaseMessage": "Identitad del emisor inválida",
      "deriveIssuingAddressFromPublicKey":  "No se puede validar la identitad decentalisada con esta cadena binaria.",
      "controlVerificationMethod": "El documento de identitad del emisor no corresponde al metodo de verificación.",
      "retrieveVerificationMethodPublicKey": "El documento de identitad del emisor no hace constar al metodo de verificación.",
      "compareIssuingAddress": "El metodo de verificación no corresponde a la identitad del emisor.",
      "invalidIssuingAddressCreationTime": "El emisor creó el metodo de verificación después de la emisión del certificado.",
      "invalidIssuingAddressRevoked": "El emisor revocó el metodo de verificación antes de la emisión del certificado.",
      "invalidIssuingAddressExpired": "El metodo de verificación expiró antes de la emisión del certificado.",
      "invalidIssuingAddressUnknown": "El metodo de verificación no pertenece a la identitad del emisor.",
      "getChain": "Valor de cadena no reconocido",
      "getIssuerProfile": "No se ha podido obtener el perfil del emisor",
      "getRevokedAssertions": "No se ha podido obtener aseveraciones de revocación",
      "getTransactionId": "No se puede verificar este certificado sin una identificación de transacción que sirva como comparación",
      "invalidMerkleReceipt": "Recibo Merkle inválido. La cadena binaria de prueba no corresponde con la raíz Merkle",
      "invalidMerkleVersion": "Merkle version used for signature is incompatible with Blockcerts version.",
      "isTransactionIdValid": "No se puede verificar este certificado sin una identificación de transacción que sirva como comparación",
      "issuerProfileNotSet": "URL del emisor no definido",
      "issuerProfileInvalid": "el documento recogido no parece ser un perfil de emisor valido",
      "parseIssuerKeys": "No se ha podido analizar el JSON de la información de identificación del emisor",
      "checkImagesIntegrity": "La verificación de la integridad de los imagens provó alteración del contenido después de la emisión."
    }
  },
  "mt": {
    "steps": {
      "formatValidationLabel": "Validazzjoni tal-format",
      "formatValidationLabelPending": "Il-format qed jiġi vvalidat",
      "signatureVerificationLabel": "Proof Verification",
      "signatureVerificationLabelPending": "Verifying Proof",
      "identityVerificationLabel": "Identity verification",
      "identityVerificationLabelPending":  "Verifying identity",
      "statusCheckLabel": "Status check",
      "statusCheckLabelPending": "Ir-record status qed jiġi ċċekkjat"
    },
    "subSteps": {
      "getTransactionIdLabel": "Ikseb l-ID ta' tranżazzjoni",
      "getTransactionIdLabelPending": "L-ID ta' tranżazzjoni qed tiġi mniżżla",
      "computeLocalHashLabel": "Ikkalkula l-hash lokali",
      "computeLocalHashLabelPending": "Il-hash lokali qed jiġi kkalkulat",
      "fetchRemoteHashLabel": "Fittex ir-remote hash",
      "fetchRemoteHashLabelPending": "Ir-remote hash qed jiġi mfittex",
      "getIssuerProfileLabel": "Ikseb il-profil tal-emittent",
      "getIssuerProfileLabelPending": "Il-profil tal-emittent qed jiġi mniżżel",
      "parseIssuerKeysLabel": "Estratta ċ-ċwievet tal-emittent",
      "parseIssuerKeysLabelPending": "Iċ-ċwievet tal-emittent qed jiġu estratti",
      "compareHashesLabel": "Ikkumpara l-hashes",
      "compareHashesLabelPending": "Il-hashes qed jiġu kkomparati",
      "checkDocumentSignatureLabel": "Check document signature",
      "checkDocumentSignatureLabelPending": "Checking document signature",
      "checkMerkleRootLabel": "Iċċekkja l-Merkle Root",
      "checkMerkleRootLabelPending": "Il-Merkle Root Qed Tiġi Ċċekkjata",
      "checkReceiptLabel": "Iċċekkja l-Irċevuta",
      "checkReceiptLabelPending": "L-Irċevuta Qed Tiġi Ċċekkjata",
      "checkAuthenticityLabel": "Iċċekkja l-Awtentiċità",
      "checkAuthenticityLabelPending": "L-Awtentiċità Qed Tiġi Ċċekkjata",
      "checkRevokedStatusLabel": "Iċċekkja l-Istatus Revokat",
      "checkRevokedStatusLabelPending": "L-Istatus Revokat Qed Jiġi Ċċekkjat",
      "checkExpiresDateLabel": "Iċċekkja d-Data ta' Skadenza",
      "checkExpiresDateLabelPending": "Id-Data ta' Skadenza Qed Tiġi Ċċekkjata",
      "controlVerificationMethodLabel": "Control Verification Method",
      "controlVerificationMethodLabelPending": "Controlling Verification Method",
      "retrieveVerificationMethodPublicKeyLabel": "Extract Public Key from DID Document",
      "retrieveVerificationMethodPublicKeyLabelPending": "Extracting Public Key from DID Document",
      "deriveIssuingAddressFromPublicKeyLabel": "Derive Issuing Address from Public Key",
      "deriveIssuingAddressFromPublicKeyLabelPending": "Deriving Issuing Address from Public Key",
      "compareIssuingAddressLabel":  "Compare addresses",
      "compareIssuingAddressLabelPending":  "Comparing addresses",
      "checkImagesIntegrityLabel":  "Verify Images Integrity",
      "checkImagesIntegrityLabelPending":  "Verifying Images Integrity"
    },
    "revocation": {
      "preReason": "Raġuni mogħtija:",
      "reason": "Dan iċ-ċertifikat ġie revokat mill-emittent."
    },
    "success": {
      "mocknet": {
        "label": "Din il-kredenzjali tal-Mocknet għaddiet il-kontrolli kollha",
        "description": "Il-kredenzjali tal-Mocknet jintużaw biss għal skopijiet ta 'ttestjar. Dawn mhumiex irreġistrati fuq blockchain, u ma għandhomx jiġu kkunsidrati bħala blockcerts verifikati."
      },
      "blockchain": {
        "label": "Ivverifikat",
        "description": "Dan huwa ċertifikat ${chain} huwa validu.",
        "linkText": "Ara l-link tat-transazzjoni"
      },
      "generic": {
        "label": "Ivverifikat",
        "description": "The ${SIGNATURE_TYPE} signature of this document has been successfully verified."
      },
      "multisign": {
        "label": "Ivverifikat",
        "description": "All the signatures of this certificate have successfully verified."
      }
    },
    "errors": {
      "certificateNotValid": "Dan mhux ċertifikat validu",
      "couldNotConfirmTx": "Ma setgħetx tiġi kkonfermata t-tranżazzjoni",
      "ensureHashesEqual": "Il-hash ikkalkulat ma jikkorrispondix mar-remote hash",
      "ensureMerkleRootEqual": "Merkle root ma taqbilx mar-remote hash",
      "ensureNotExpired": "Dan iċ-ċertifikat skada",
      "ensureValidReceipt": "L-irċevuta hija malformata. Kien hemm problema fin-navigazzjoni tal-merkle tree fl-irċevuta",
      "failedJsonLdNormalization": "In-normalizzazzjoni ta' JSON-LD ma rnexxietx",
      "foundUnmappedFields": "Instabu unmapped fields matul in-normalizzazzjoni JSON-LD",
      "identityErrorBaseMessage": "Issuer identity mismatch",
      "deriveIssuingAddressFromPublicKey":  "Unsupported blockchain for DID verification",
      "controlVerificationMethod": "The identity document provided by the issuer does not match the verification method",
      "retrieveVerificationMethodPublicKey": "The identity document provided by the issuer does not reference the verification method",
      "compareIssuingAddress": "The provided verification method does not match the issuer identity",
      "invalidIssuingAddressCreationTime": "L-indirizz elettroniku tal-ħruġ speċifikat inħoloq wara li seħħet it-tranżazzjoni.",
      "invalidIssuingAddressRevoked": "L-indirizz elettroniku tal-ħruġ speċifikat ġie revokat mill-emittent qabel ma seħħet it-tranżazzjoni.",
      "invalidIssuingAddressExpired": "L-indirizz elettroniku tal-ħruġ speċifikat skada qabel ma seħħet it-tranżazzjoni.",
      "invalidIssuingAddressUnknown": "L-indirizz elettroniku użat biex jinħarġu dawn il-Blockcerts ma jappartjenix għall-emittent mitlub.",
      "getChain": "Iċ-chain value ma ntgħarafx",
      "getIssuerProfile": "Mhux possibbli jinkiseb il-profil tal-emittent",
      "getRevokedAssertions": "Mhux possibbli jinkisbu dikjarazzjonijiet revokati",
      "getTransactionId": "Dan iċ-ċertifikat ma jistax jiġi vverifikat mingħajr ID ta' tranżazzjoni mqabbla miegħu",
      "invalidMerkleReceipt": "Irċevuta Merkle invalida. Il-proof hash ma kienx jaqbel mal-Merkle root",
      "invalidMerkleVersion": "Merkle version used for signature is incompatible with Blockcerts version.",
      "isTransactionIdValid": "Dan iċ-ċertifikat ma jistax jiġi vverifikat mingħajr ID ta' tranżazzjoni mqabbla miegħu",
      "issuerProfileNotSet": "no issuer address given",
      "issuerProfileInvalid": "retrieved file does not seem to be a valid profile",
      "parseIssuerKeys": "Ma jistax jiġi estratt JSON mid-data tal-identifikazzjoni tal-emittent",
      "checkImagesIntegrity": "Image integrity verification proved that the content was modified after issuance."
    }
  },
  "it-IT": {
    "steps": {
      "formatValidationLabel": "Convalidare formato",
      "formatValidationLabelPending": "Convalida formato",
      "signatureVerificationLabel": "Proof Verification",
      "signatureVerificationLabelPending": "Verifying Proof",
      "identityVerificationLabel": "Identity verification",
      "identityVerificationLabelPending":  "Verifying identity",
      "statusCheckLabel": "Verificare stato",
      "statusCheckLabelPending": "Verifica stato del record"
    },
    "subSteps": {
      "getTransactionIdLabel": "Ottenere ID transazione",
      "getTransactionIdLabelPending": "Ottieni ID transazione",
      "computeLocalHashLabel": "Calcolare hash locale",
      "computeLocalHashLabelPending": "Calcola hash locale",
      "fetchRemoteHashLabel": "Recuperare hash remoto",
      "fetchRemoteHashLabelPending": "Recupera hash remoto",
      "getIssuerProfileLabel": "Ottenere profilo issuer",
      "getIssuerProfileLabelPending": "Ottieni profilo issuer",
      "parseIssuerKeysLabel": "Analizzare chiavi issuer",
      "parseIssuerKeysLabelPending": "Analizza chiavi issuer",
      "compareHashesLabel": "Confrontare gli hash",
      "compareHashesLabelPending": "Confronto hash",
      "checkDocumentSignatureLabel": "Check document signature",
      "checkDocumentSignatureLabelPending": "Checking document signature",
      "checkMerkleRootLabel": "Controllare radice di Merkle",
      "checkMerkleRootLabelPending": "Controllo radice di Merkle",
      "checkReceiptLabel": "Verificare ricevuta",
      "checkReceiptLabelPending": "Verifica ricevuta",
      "checkAuthenticityLabel": "Verificare autenticità",
      "checkAuthenticityLabelPending": "Verifica autenticità",
      "checkRevokedStatusLabel": "Verificare stato revocato",
      "checkRevokedStatusLabelPending": "Verifica stato revocato",
      "checkExpiresDateLabel": "Verificare data di scadenza",
      "checkExpiresDateLabelPending": "Verifica data di scadenza",
      "controlVerificationMethodLabel": "Control Verification Method",
      "controlVerificationMethodLabelPending": "Controlling Verification Method",
      "retrieveVerificationMethodPublicKeyLabel": "Extract Public Key from DID Document",
      "retrieveVerificationMethodPublicKeyLabelPending": "Extracting Public Key from DID Document",
      "deriveIssuingAddressFromPublicKeyLabel": "Derive Issuing Address from Public Key",
      "deriveIssuingAddressFromPublicKeyLabelPending": "Deriving Issuing Address from Public Key",
      "compareIssuingAddressLabel":  "Compare addresses",
      "compareIssuingAddressLabelPending":  "Comparing addresses",
      "checkImagesIntegrityLabel":  "Verify Images Integrity",
      "checkImagesIntegrityLabelPending":  "Verifying Images Integrity"
    },
    "revocation": {
      "preReason": "Motivo indicato:",
      "reason": "Questo certificato è stato revocato dall'emittente."
    },
    "success": {
      "mocknet": {
        "label": "Questo Blockcert simulato ha superato tutti i controlli.",
        "description": "La modalità Mocknet è utilizzata solo dagli emittenti per testare il loro flusso di lavoro localmente. Questo Blockcert non è stato registrato su una blockchain e non dovrebbe essere considerato un Blockcert verificato."
      },
      "blockchain": {
        "label": "Verificato",
        "description": "Questo è un certificato ${chain} valido.",
        "linkText": "Vedi la transazione"
      },
      "generic": {
        "label": "Verificato",
        "description": "The ${SIGNATURE_TYPE} signature of this document has been successfully verified."
      },
      "multisign": {
        "label": "Verificato",
        "description": "All the signatures of this certificate have successfully verified."
      }
    },
    "errors": {
      "certificateNotValid": "Questo non è un certificato valido",
      "couldNotConfirmTx": "Impossibile confermare la transazione",
      "ensureHashesEqual": "L'hash calcolato non corrisponde all'hash remoto",
      "ensureMerkleRootEqual": "La radice di Merkle non corrisponde all'hash remoto.",
      "ensureNotExpired": "Questo certificato è scaduto.",
      "ensureValidReceipt": "La ricevuta è malformata. C'è stato un problema nella navigazione dell'albero di Merkle nella ricevuta.",
      "failedJsonLdNormalization": "Normalizzazione JSON-LD fallita",
      "foundUnmappedFields": "Campi non mappati trovati durante la normalizzazione JSON-LD",
      "identityErrorBaseMessage": "Issuer identity mismatch",
      "deriveIssuingAddressFromPublicKey":  "Unsupported blockchain for DID verification",
      "controlVerificationMethod": "The identity document provided by the issuer does not match the verification method",
      "retrieveVerificationMethodPublicKey": "The identity document provided by the issuer does not reference the verification method",
      "compareIssuingAddress": "The provided verification method does not match the issuer identity",
      "invalidIssuingAddressCreationTime": "The specified issuing address was created after the transaction occurred.",
      "invalidIssuingAddressRevoked": "The specified issuing address was revoked by the issuer before the transaction occurred.",
      "invalidIssuingAddressExpired": "The specified issuing address expired before the transaction occurred.",
      "invalidIssuingAddressUnknown": "The address used to issue this Blockcerts does not belong to the claimed issuer.",
      "getChain": "Il valore della catena non è stato riconosciuto",
      "getIssuerProfile": "Impossibile ottenere il profilo dell'emittente",
      "getRevokedAssertions": "Impossibile ottenere le asserzioni di revoca",
      "getTransactionId": "Impossibile verificare questo certificato senza un ID transazione da confrontare.",
      "invalidMerkleReceipt": "Ricevuta Merkle non valida. L'hash di prova non corrisponde alla radice di Merkle",
      "invalidMerkleVersion": "Merkle version used for signature is incompatible with Blockcerts version.",
      "isTransactionIdValid": "Impossibile verificare questo certificato senza un ID transazione da confrontare.",
      "issuerProfileNotSet": "no issuer address given",
      "issuerProfileInvalid": "retrieved file does not seem to be a valid profile",
      "parseIssuerKeys": "Impossibile analizzare JSON dai dati di identificazione dell'emittente.",
      "checkImagesIntegrity": "Image integrity verification proved that the content was modified after issuance."
    }
  },
  "ja": {
    "steps": {
      "formatValidationLabel": "形式の検証",
      "formatValidationLabelPending": "形式を検証",
      "signatureVerificationLabel": "証明の検証",
      "signatureVerificationLabelPending": "証明を検証",
      "identityVerificationLabel": "アイデンティティの検証",
      "identityVerificationLabelPending":  "アイデンティティを検証",
      "statusCheckLabel": "ステータスの確認",
      "statusCheckLabelPending": "ステータスを確認"
    },
    "subSteps": {
      "getTransactionIdLabel": "取引IDの取得",
      "getTransactionIdLabelPending": "取引IDを取得",
      "computeLocalHashLabel": "ローカルハッシュの算出",
      "computeLocalHashLabelPending": "ローカルハッシュを算出",
      "fetchRemoteHashLabel": "リモートハッシュの取得",
      "fetchRemoteHashLabelPending": "リモートハッシュを取得",
      "getIssuerProfileLabel": "発行者プロフィールの取得",
      "getIssuerProfileLabelPending": "発行者プロフィールを取得",
      "parseIssuerKeysLabel": "発行者の鍵の解析",
      "parseIssuerKeysLabelPending": "発行者の鍵を解析",
      "compareHashesLabel": "ハッシュの照合",
      "compareHashesLabelPending": "ハッシュを照合",
      "checkDocumentSignatureLabel": "Documentの署名の確認",
      "checkDocumentSignatureLabelPending": "Documentの署名を確認",
      "checkMerkleRootLabel": "Merkle Rootの確認",
      "checkMerkleRootLabelPending": "Merkle Rootを確認",
      "checkReceiptLabel": "レシートの確認",
      "checkReceiptLabelPending": "レシートを確認",
      "checkAuthenticityLabel": "真正性の確認",
      "checkAuthenticityLabelPending": "真正性を確認",
      "checkRevokedStatusLabel": "取消ステータスの確認",
      "checkRevokedStatusLabelPending": "取消ステータスを確認",
      "checkExpiresDateLabel": "有効期限の確認",
      "checkExpiresDateLabelPending": "有効期限を確認",
      "controlVerificationMethodLabel": "検証方法の設定",
      "controlVerificationMethodLabelPending": "検証方法を設定",
      "retrieveVerificationMethodPublicKeyLabel": "DID Documentからの公開鍵取得",
      "retrieveVerificationMethodPublicKeyLabelPending": "DID Documentから公開鍵を取得",
      "deriveIssuingAddressFromPublicKeyLabel": "公開鍵からの発行者アドレス取得",
      "deriveIssuingAddressFromPublicKeyLabelPending": "公開鍵から発行者アドレスを取得",
      "compareIssuingAddressLabel":  "アドレスの照合",
      "compareIssuingAddressLabelPending":  "アドレスを照合",
      "checkImagesIntegrityLabel":  "画像の保全性の確認",
      "checkImagesIntegrityLabelPending":  "画像の保全性を確認"
    },
    "revocation": {
      "preReason": "理由：",
      "reason": "この証明書は発行者によって取り消されました。"
    },
    "success": {
      "mocknet": {
        "label": "このMocknetの証明書は全てのチェックを通過しました。",
        "description": "Mocknetの証明書はテスト用のものです。ブロックチェーンに記録されず、認証可能のBlockcert証明書として扱われません。"
      },
      "blockchain": {
        "label": "認証されました",
        "description": "この証明書は有効な${chain}の証明書です。",
        "linkText": "取引を確認する"
      },
      "generic": {
        "label": "認証されました",
        "description": "このdocumentの${SIGNATURE_TYPE}の署名の確認に成功しました。"
      },
      "multisign": {
        "label": "認証されました",
        "description": "この証明書の全ての署名の確認に成功しました。"
      }
    },
    "errors": {
      "certificateNotValid": "この証明書は無効です",
      "couldNotConfirmTx": "取引を確認できませんでした",
      "ensureHashesEqual": "算出されたハッシュがリモートハッシュと一致しませんでした",
      "ensureMerkleRootEqual": "Merkle rootがリモートハッシュと一致しませんでした",
      "ensureNotExpired": "この証明書の有効期限が切れています",
      "ensureValidReceipt": "レシートに異常があります。レシート内のMerkle treeを辿る際に問題が発生しました。",
      "failedJsonLdNormalization": "JSON-LDの正規化に失敗しました",
      "foundUnmappedFields": "JSON-LDの正規化時にマップされていないフィールドを検出しました",
      "identityErrorBaseMessage": "発行者アイデンティティが一致しませんでした",
      "deriveIssuingAddressFromPublicKey":  "DID認証未対応のブロックチェーンです",
      "controlVerificationMethod": "発行者から提供されたアイデンティティdocumentが認証方法と一致していません",
      "retrieveVerificationMethodPublicKey": "発行者から提供されたアイデンティティdocumentが認証方法を参照していません",
      "compareIssuingAddress": "提供された認証方法は発行者アイデンティティと一致していません",
      "invalidIssuingAddressCreationTime": "指定の発行者アドレスは取引が行われた後に生成されました。",
      "invalidIssuingAddressRevoked": "指定の発行者アドレスは取引が行われた前に発行者によって取消されました。",
      "invalidIssuingAddressExpired": "指定の発行者アドレスは取引が行われた前に有効期限が切れました。",
      "invalidIssuingAddressUnknown": "このBlockcert証明書の発行に使用されたアドレスは指定の発行者が所有していません。",
      "getChain": "チェーンの値を認識できませんでした",
      "getIssuerProfile": "発行者プロフィールを取得できません",
      "getRevokedAssertions": "取消assertionsを取得できません",
      "getTransactionId": "照合のための取引IDがないため、この証明書を認証できません。",
      "invalidMerkleReceipt": "Merkleレシートが無効です。証明ハッシュがMerkle rootと一致しませんでした。",
      "invalidMerkleVersion": "署名に使用されたMerkleのバージョンはBlockcertsのバージョンに対応できません。",
      "isTransactionIdValid": "照合するための取引IDがないため、この証明書を認証できません。",
      "issuerProfileNotSet": "発行者アドレスが提供されませんでした",
      "issuerProfileInvalid": "取得されたファイルが有効なプロフィールではないようです",
      "parseIssuerKeys": "発行者識別データからJSONの解析ができません",
      "checkImagesIntegrity": "データが発行後に変更されたことが画像保全性の検証によって証明されました。"
    }
  }
}
